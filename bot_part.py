import asyncio
import pathlib
from os.path import join


from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.utils.exceptions import MessageTextIsEmpty


from api_part_sync import SearchEngine
from database_part import CinemabotDatabase
from keyboards import create_links_keyboard, additional_keyboard


current_dir = pathlib.Path(__file__).parent.resolve()
with open(join(current_dir, join("secrets", "telegram_token.txt")), 'r') as token_file:
    token = token_file.readline()

bot = Bot(token=token, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

cinemabot_database = CinemabotDatabase(join(current_dir, "cinemabot.db"))
search_engine = SearchEngine()


# –ø–æ–º–æ—â—å –∏ —Å—Ç–∞—Ä—Ç
def create_help_template(user_name: str) -> str:
    return f"–ü—Ä–∏–≤–µ—Ç, {user_name}, —ç—Ç–æ Cinemabot! –° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã –º–æ–∂–µ—à—å:\n " + \
            "1. üìù –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞/–∞–Ω–∏–º–µ, —Ç–æ–≥–¥–∞ —è –≤–µ—Ä–Ω—É —Ç–µ–±–µ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ, " + \
            "–æ—Ü–µ–Ω–∫—É –∏ –ø–æ—Å—Ç–µ—Ä, –∞ —Ç–∞–∫–∂–µ —Å–∫–∞–∂—É, –≥–¥–µ –µ–≥–æ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å.\n" + \
            "2. üìà –ù–∞–ø–∏—Å–∞—Ç—å /stats, —Ç–æ–≥–¥–∞ —è –ø–æ–∫–∞–∂—É, —á—Ç–æ –∏ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ª–∏—á–Ω–æ —Ç—ã –∏—Å–∫–∞–ª —Å –º–æ–µ–π –ø–æ–º–æ—â—å—é.\n" + \
            "3. üìñ –ù–∞–ø–∏—Å–∞—Ç—å /history, —Ç–æ–≥–¥–∞ —è –≤–µ—Ä–Ω—É —Ç–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞.\n" + \
            "4. üåü –ù–∞–ø–∏—Å–∞—Ç—å /help, —Ç–æ–≥–¥–∞ —è –ø–æ–∫–∞–∂—É —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞.\n" + \
            "–¢–∞–∫–∂–µ —É –º–µ–Ω—è –µ—Å—Ç—å —É–¥–æ–±–Ω—ã–µ inline –∫–Ω–æ–ø–æ—á–∫–∏ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ ‚ú®."


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message) -> None:
    """
    Send help information to the user
    :param message:
    :return:
    """
    await message.reply(create_help_template(message.from_user.full_name), reply_markup=additional_keyboard)


@dp.callback_query_handler(text='/help')
async def send_help(callback: types.CallbackQuery) -> None:
    await callback.message.reply(create_help_template(callback.from_user.full_name), reply_markup=additional_keyboard)
    await callback.answer()


# –ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.message_handler(commands=['stats'])
async def send_stats_handler(message: types.Message) -> None:
    """
    Send personal search stats to the user, associated with '/stats' command
    :param message:
    :return:
    """
    try:
        search_result = await cinemabot_database.get_personal_statistics(message.from_user.id)
        bot_answer = "–ê –≤–æ—Ç –∏ —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞:\n"
        for row in search_result:
            bot_answer += f"{row[0]} | {row[1]}\n"
        await message.reply(bot_answer)
        await message.answer("–ß–µ–º —è –µ—â—ë –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?", reply_markup=additional_keyboard)
    except MessageTextIsEmpty:
        await message.reply("–ò–∑–≤–∏–Ω–∏, —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞.")
        await message.answer("–ß–µ–º —è –µ—â—ë –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?", reply_markup=additional_keyboard)


@dp.callback_query_handler(text='/stats')
async def send_stats(callback: types.CallbackQuery) -> None:
    """
    Send personal search stats to the user, associated with '–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' inline button
    :param callback:
    :return:
    """
    try:
        search_result = await cinemabot_database.get_personal_statistics(callback.from_user.id)
        bot_answer = "–ê –≤–æ—Ç –∏ —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞:\n"
        for row in search_result:
            bot_answer += f"{row[0]} | {row[1]}\n"
        await callback.message.reply(bot_answer)
        await callback.message.answer("–ß–µ–º —è –µ—â—ë –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?", reply_markup=additional_keyboard)
        await callback.answer()
    except MessageTextIsEmpty:
        await callback.message.reply("–ò–∑–≤–∏–Ω–∏, —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞.")
        await callback.message.answer("–ß–µ–º —è –µ—â—ë –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?", reply_markup=additional_keyboard)
        await callback.answer()


# –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞
async def create_message_history(chat_id: str) -> str:
    """
    Creates a valid history message.
    :return: a history in a valid format
    """
    search_result = await cinemabot_database.get_last_records(chat_id)
    if not search_result:
        return "–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞."
    answer = "–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞:\n"
    for row in search_result:
        answer += f"{row[0]}\n"
    return answer


@dp.message_handler(commands=['history'])
async def send_history(message: types.Message) -> None:
    """
    Return a personal search history to the user, associated with '/history' command
    :param message:
    :return:
    """
    await message.reply(await create_message_history(message.from_user.id))
    await message.answer("–ß–µ–º —è –µ—â—ë –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?", reply_markup=additional_keyboard)


@dp.callback_query_handler(text='/history')
async def send_history_handler(callback: types.CallbackQuery) -> None:
    """
    Return a personal search history to the user, associated with '–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞' inline button
    :param callback:
    :return:
    """
    await callback.message.answer(await create_message_history(callback.from_user.id))
    await callback.message.answer("–ß–µ–º —è –µ—â—ë –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?", reply_markup=additional_keyboard)
    await callback.answer()


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
@dp.message_handler()
async def process_movie(message: types.Message) -> None:
    """
    Send poster, rating and show's description to the user. In the case of failure, return a sorry message
    :param message:
    :return:
    """

    # async
    non_blocking_io = asyncio.to_thread(search_engine.get_information_by_query, message.text)
    search_result = await asyncio.gather(non_blocking_io)
    # gather –∑–∞—á–µ–º-—Ç–æ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≤—ã—Ö–æ–¥ –≤ –ª–∏—Å—Ç
    search_result = search_result[0]  # type: ignore

    # sync
    # search_result = search_engine.get_information_by_query(message.text)
    if isinstance(search_result, tuple):
        await message.reply(search_result[1])  # type: ignore
    else:
        # –ø–æ—Å—Ç–µ—Ä, —Ä–µ–π—Ç–∏–Ω–≥ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        try:  # type: ignore
            description = search_result['description'].replace('\xa0', ' ')
            await bot.send_photo(message.from_user.id, search_result['poster']['url'])
            await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {search_result['name']}\n"
                                 f"–†–µ–π—Ç–∏–Ω–≥ –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ {search_result['rating']['kp']}\n" +
                                 f"–†–µ–π—Ç–∏–Ω–≥ –Ω–∞ IMDB {search_result['rating']['imdb']}\n" +
                                 f"{description}")

            # –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            watch_links = search_result['watchability']['items']
            if watch_links is None:
                await message.answer("–ò–∑–≤–∏–Ω–∏, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ —É –º–µ–Ω—è –¥–ª—è —Ç–µ–±—è –Ω–µ—Ç, " +
                                     "–Ω–æ —è –ø–æ–ø—Ä–æ–±—É—é —á—Ç–æ-–Ω–∏–±—É–¥—å –ø—Ä–∏–¥—É–º–∞—Ç—å üòâ.")
            else:
                names = [link['name'] for link in watch_links]
                links = [link['url'] for link in watch_links]
                await message.answer("–ê –≤–æ—Ç –∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä, –Ω–æ —ç—Ç–æ –µ—â—ë –Ω–µ –≤—Å—ë üòâ.",
                                     reply_markup=create_links_keyboard(names, links))

            # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±/–¥
            await cinemabot_database.insert_value(message.from_user.id, search_result['name'])

            # –æ—Å—É–∂–¥–∞–µ–º—ã–µ —Å—Å—ã–ª–∫–∏

            name = "–û—Å—É–∂–¥–∞–µ–º–∞—è —Å—Å—ã–ª–∫–∞ üò°"
            link = f"https://www.kinopoisk.gg/{search_engine.get_last_type()}/{search_engine.get_last_id()}/"
            await message.answer("–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–µ—Å—Ç–µ üöÄ", reply_markup=create_links_keyboard([name], [link]))
            # names, links = search_engine.get_pirated_links(search_result['name'])
            # if len(names) == 0:
            #     await message.answer("–ò–∑–≤–∏–Ω–∏, –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ —è –Ω–µ –Ω–∞—à—ë–ª üòø.")
            # else:
            #     await message.answer("–ê –≤–æ—Ç –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏!", reply_markup=create_links_keyboard(names, links))

            # –∫–Ω–æ–ø–æ—á–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π, –∏—Å—Ç–æ—Ä–∏–µ–π –∏ —Ç.–¥.
            await message.answer("–ß–µ–º —è –µ—â—ë –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?", reply_markup=additional_keyboard)

        except AttributeError:
            await message.reply("–ò–∑–≤–∏–Ω–∏, —è –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª üòø.")
            await message.answer("–ß–µ–º —è –µ—â—ë –º–æ–≥—É —Ç–µ–±–µ –ø–æ–º–æ—á—å?", reply_markup=additional_keyboard)

if __name__ == '__main__':
    # executor.start_polling(dp)
    executor.start_polling(dp, skip_updates=True)
